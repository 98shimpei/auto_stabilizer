#ifndef AutoStabilizerService_idl
#define AutoStabilizerService_idl

module OpenHRP
{

  interface AutoStabilizerService
  {
    /**
     * @struct Footstep
     * @brief Foot step for one leg.
     */
    struct Footstep
    {
      /// Foot position [m]
      sequence<double, 3> pos;
      /// Foot orientation by quaternion (w,x,y,z)
      sequence<double, 4> rot;
      /// Leg name (rleg or lleg)
      string leg;
    };

    /**
     * @struct StepParam
     * @brief Step parameter for one step
     */
    struct StepParam
    {
      /// Step height [m]
      double step_height;
      /// Step time [s]
      double step_time;
      ///
      boolean swing_end;
    };

    /**
     * @struct FootstepSequence
     * @brief Sequence of foot step.
     */
    typedef sequence<Footstep> FootstepSequence;
    typedef sequence<StepParam> StepParamSequence;

    /**
     * @enum ControllerMode
     * @brief Mode of controller
     */
    enum ControllerMode {
      MODE_IDLE,
      MODE_ABC,
      MODE_SYNC_TO_IDLE,
      MODE_SYNC_TO_ABC,
      MODE_STIDLE,
      MODE_AIR,
      MODE_ST,
      MODE_SYNC_TO_STIDLE,
      MODE_SYNC_TO_AIR
    };

    /**
     * @enum UseForceMode
     * @brief Mode of use_force
     */
    enum UseForceMode {
      /// Mode in which robot's COG is not changed according to force/moment values
      MODE_NO_FORCE,
      /// Mode in which robot's COG is changed according to sensors' force/moment values
      MODE_REF_FORCE,
      /// Mode in which robot's COG is changed according to sensors' force/moment values for hands and feet (and root-link)
      MODE_REF_FORCE_WITH_FOOT,
      /// Mode in which robot's COG is changed according to sensors' force/moment values using ReferenceForceUpdater's ext moment
      MODE_REF_FORCE_RFU_EXT_MOMENT
    };

    /**
     * @enum EmergencyCheckMode
     * @brief Mode of emergency checking
     */
    enum EmergencyCheckMode {
      NO_CHECK,
      COP,
      CP,
      TILT
    };

    /**
     * @struct JointServoControlParameter
     * @brief Joint PD Servo Control Parameters
     */
    struct JointServoControlParameter {
      sequence<double> support_pgain;
      sequence<double> support_dgain;
      sequence<double> landing_pgain;
      sequence<double> landing_dgain;
      sequence<double> swing_pgain;
      sequence<double> swing_dgain;
    };

    struct AutoStabilizerParam
    {
      // AutoStabilizer
      /// AutoStablizerが変更する関節の名前. MODE_IDLEのとき以外変更不可.
      sequence<string> controllable_joints;
      /// Transition time [s] for start AutoBalancer. 下限0.01[s]
      double abc_start_transition_time;
      /// Transition time [s] for stop AutoBalancer. 下限0.01[s]
      double abc_stop_transition_time;
      /// Transition time [s] for start Stabilizer. 下限0.01[s]
      double st_start_transition_time;
      /// Transition time [s] for stop Stabilizer. 下限0.01[s]
      double st_stop_transition_time;

      // GaitParam
      /// ZMP offset vectors[m] for rleg and lleg (<-please set by this order)
      sequence<sequence<double, 2>, 2> default_zmp_offsets;
      /// convex hull.
      sequence<sequence<sequence<double, 2> >, 2> leg_hull;
      /// Foot position offset in Y axis[m] (rleg and lleg)
      sequence<double, 2> leg_default_translate_pos;
      ///
      sequence<boolean, 2> is_manual_control_mode;

      // RefToGenFrameConverter
      /// Flag for fix hand while walking.
      boolean is_hand_fix_mode;
      /// reference frameのfootMidCoordsを計算するときに使うか
      sequence<boolean, 2> ref_foot_origin_frame;

      // ExternalForceHandler
      /// Whether use disturbance compensation or not.
      boolean use_disturbance_compensation;
      /// Time Const for disturbance compensation [s]. 下限0.01[s]
      double disturbance_compensation_time_const;
      /// 下限1
      long disturbance_compensation_step_num;
      /// 下限0[m]
      double disturbance_compensation_limit;

      // ImpedanceController
      sequence<sequence<double, 3> > impedance_M_p;
      sequence<sequence<double, 3> > impedance_D_p;
      sequence<sequence<double, 3> > impedance_K_p;
      sequence<sequence<double, 3> > impedance_M_r;
      sequence<sequence<double, 3> > impedance_D_r;
      sequence<sequence<double, 3> > impedance_K_r;
      sequence<sequence<double, 3> > impedance_force_gain;
      sequence<sequence<double, 3> > impedance_moment_gain;
      /// StopImpedanceControllerのとき以外変更不可
      sequence<sequence<double, 3> > impedance_pos_compensation_limit;
      /// StopImpedanceControllerのとき以外変更不可
      sequence<sequence<double, 3> > impedance_rot_compensation_limit;

      // CmdVelGenerator
      ///
      boolean graspless_manip_mode;
      /// 要素数0~2. endeffector名
      sequence<string> graspless_manip_arm;
      /// 下限0.01[s]
      sequence<double, 3> graspless_manip_time_const;

      // FootStepGenerator
      /// Step time [s]. 下限0.01[s]
      double default_step_time;
      /// 下限0[rad]
      double default_stride_limitation_theta;
      /// convex hull. [m]
      sequence<sequence<sequence<double, 2> >, 2> default_stride_limitation;
      /// Ratio of double support period. 下限0.01. 上限0.99
      double default_double_support_ratio;
      /// Step height [m]. 0以上
      double default_step_height;
      /// 下限1
      long go_velocity_step_num;
      /// Whether modify footsteps based on Capture Point
      boolean modify_footsteps;
      /// overwritable remainTime[s]. 下限0.0[s]
      double overwritable_remain_time;
      /// overwritable min time[s]. 下限0.01[s]
      double overwritable_min_time;
      /// overwritable min step time[s]. 下限0.01[s]
      double overwritable_min_step_time;
      /// overwritable max step time[s]. 下限overwritable_min_step_time[s].
      double overwritable_max_step_time;
      /// 下限0.0[m/s].
      double overwritable_max_swing_velocity;
      /// convex hull. [s]
      sequence<sequence<sequence<double, 2> >, 2> safe_leg_hull;
      /// convex hull. [m]. 歩行中は変更不可
      sequence<sequence<sequence<double, 2> >, 2> overwritable_stride_limitation;
      /// [N]
      double contact_detection_threshould;
      /// whether step when emergency
      boolean is_emergency_step_mode;
      /// whether gostop after becoming stable
      boolean is_stable_go_stop_mode;
      /// 下限1
      long emergency_step_num;
      /// CP margin [m]
      double emergency_step_cp_check_margin;

      // LegCoordsGenerator
      /// Time offset [s] for swing trajectory by delay_hoffarbib_trajectory_generator. 下限0.0
      double swing_trajectory_delay_time_offset;
      /// 下限0.001[m/s]
      double swing_trajectory_touch_vel;
      /// Weight parameter for distance of final path of delay_hoffarbib_trajectory_generator. 下限0.01
      double swing_trajectory_final_distance_weight;
      /// [N]. 上限0.0. 歩行中は変更不可
      double goal_offset;
      /// 下限2
      long preview_step_num;
      /// [s]. 下限0.01[s]
      double footguided_balance_time;

      // Stabilizer
      /// Body attitude control gain [rad/s] (roll, pitch). 下限0.0
      sequence<double, 2> eefm_body_attitude_control_gain;
      /// Time constant for body attitude control [s] (roll, pitch).o 下限0.01
      sequence<double, 2> eefm_body_attitude_control_time_const;
      /// Limit of compensation for difference between ref-act root rot [rad]. stabilierが動いているときは変更不可. 下限0.0
      sequence<double, 2> eefm_body_attitude_control_compensation_limit;
      /// Sequence of all end-effector rotation damping gain [Nm/(rad/s)] (r,p,y). 下限0.01
      sequence<sequence<double, 3>, 2 > eefm_rot_damping_gain;
      /// Sequence of all end-effector rotation damping time constant [s] (r,p,y). 下限0.01
      sequence<sequence<double, 3>, 2 > eefm_rot_time_const;
      /// Sequence of all end-effector position damping gain [N/(m/s)] (x,y,z). 下限0.01
      sequence<sequence<double, 3>, 2 > eefm_pos_damping_gain;
      /// Sequence of all end-effector position damping time constant for double support phase [s] (x,y,z). 下限0.01
      sequence<sequence<double, 3>, 2 > eefm_pos_time_const;
      /// Sequence of all end-effector position compensation limit [m]. stabilierが動いているときは変更不可. 下限0.0
      sequence<double, 2> eefm_pos_compensation_limit;
      /// Sequence of all end-effector rot compensation limit [rad]. stabilierが動いているときは変更不可. 下限0.0
      sequence<double, 2> eefm_rot_compensation_limit;
      ///
      boolean is_torque_control_mode;
      /// 下限0.01[s]
      double swing2landing_transition_time;
      /// 下限0.01[s]
      double landing2support_transition_time;
      /// 下限0.01[s]
      double support2swing_transition_time;
      /// 下限0 上限100
      sequence<sequence<double> > support_pgain;
      /// 下限0 上限100
      sequence<sequence<double> > support_dgain;
      /// 下限0 上限100
      sequence<sequence<double> > landing_pgain;
      /// 下限0 上限100
      sequence<sequence<double> > landing_dgain;
      /// 下限0 上限100
      sequence<sequence<double> > swing_pgain;
      /// 下限0 上限100
      sequence<sequence<double> > swing_dgain;
    };

    /**
     * @brief Walk to the goal position and orientation. Returns without waiting for whole steps to be executed.
     * @param i_x[m], i_y[m], and i_th[deg] are goal x-y-position and z-orientation from the current mid-coords of right foot and left foot.
     * @return true if set successfully, false otherwise
     */
    boolean goPos(in double x, in double y, in double th);

    /**
     * @brief Walk at the desired velocity. If the robot is stopping, the robot starts stepping. Returns without waiting for whole steps to be executed.
     * @param i_vx[m/s], i_vy[m/s], and i_vth[deg/s] are velocity in the current mid-coords of right foot and left foot.
     * @return true if set successfully, false otherwise
     */
    boolean goVelocity(in double vx, in double vy, in double vth);

    /**
     * @brief Stop stepping.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean goStop();

    boolean jumpTo(in double x, in double y, in double z, in double ts, in double tf);

    /**
     * @brief Set footsteps. Returns without waiting for whole steps to be executed.
     * @param fss is sequence of FootStep structure.
     * @return true if set successfully, false otherwise
     */
    boolean setFootSteps(in FootstepSequence fs);

    /**
     * @brief Set footsteps. Returns without waiting for whole steps to be executed.
     * @param fss is sequence of FootStepWithParam structure.
     * @return true if set successfully, false otherwise
     */
    boolean setFootStepsWithParam(in FootstepSequence fs, in StepParamSequence sps);

    /**
     * @brief Wait for whole footsteps are executed.
     * @param
     * @return true if set successfully, false otherwise
     */
    void waitFootSteps();

    /**
     * @brief Start AutoBalancer mode in which the robot controls the COM.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean startAutoBalancer();

    /**
     * @brief Stop AutoBalancer mode.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean stopAutoBalancer();

    /**
     * @brief Release emergency stop mode.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean releaseEmergencyStop();

    /**
     * @brief Start Stabilizer mode.
     * @param
     * @return
     */
    boolean startStabilizer();

    /**
     * @brief Sop Stabilizer mode.
     * @param
     * @return
     */
    boolean stopStabilizer();

    /**
     * @brief start impedance controller.
     * @param name: name of end_effector
     * @return true if set successfully, false otherwise
     */
    boolean startImpedanceController(in string name);

    /**
     * @brief stop impedance controller.
     * @param name: name of end_effector
     * @return true if set successfully, false otherwise
     */
    boolean stopImpedanceController(in string name);

    /**
     * @brief Set AutoStabilizer parameters
     * @param i_param is input parameter
     * @return true if set successfully, false otherwise
     */
    boolean setAutoStabilizerParam(in AutoStabilizerParam i_param);

    /**
     * @brief Get AutoStabilizer parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getAutoStabilizerParam(out AutoStabilizerParam i_param);

    /**
     * @struct FootstepState
     * @brief Foot step state.
     */
    struct FootStepState
    {
      sequence<Footstep, 2> leg_coords;
      sequence<boolean, 2> support_leg;
      sequence<Footstep, 2> leg_src_coords;
      sequence<Footstep, 2> leg_dst_coords;
      // 現在支持脚、または現在遊脚で次支持脚になる脚の、dstCoordsの中間. 水平
      Footstep dst_foot_midcoords;
    };

    boolean getFootStepState(out FootStepState i_param);

  };
};

#endif
